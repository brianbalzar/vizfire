#' Define a Custom ggplot2 Theme for Spitfire Branding
#'
#' This function creates a custom ggplot2 theme using the Arial font family. It is designed to provide
#' a professional and clean look suitable for business and academic presentations. The theme customizes text,
#' titles, axes, legends, panels, and plot margins to create a consistent and identifiable style for all plots.
#'
#' @return A ggplot2 theme object that can be applied to any ggplot.
#' @examples
#' p <- ggplot(mpg, aes(displ, hwy, colour = class)) +
#'   geom_point() +
#'   labs(title = "Engine Displacement vs. Highway Miles Per Gallon",
#'        subtitle = "Data from the 'mpg' dataset",
#'        caption = "Source: ggplot2 mpg dataset") +
#'   spitfire_theme()  # Apply the custom theme
#' print(p)
#' @export
#'
#' @import ggplot2
spitfire_theme <- function() {
  theme_minimal(base_family = "Arial") +
    theme(
      # Text elements
      text = element_text(family = "Arial", color = "#333333"),

      # Title and labels
      plot.title = element_text(size = 16, face = "bold", hjust = 0),
      plot.subtitle = element_text(size = 14, margin = margin(b = 10)),
      plot.caption = element_text(size = 10, margin = margin(t = 10)),
      axis.title = element_text(size = 12, face = "bold"),
      axis.title.x = element_text(margin = margin(t = 5)),
      axis.title.y = element_text(margin = margin(r = 5)),

      # Axis text
      axis.text = element_text(size = 10),
      axis.text.x = element_text(angle = 0, hjust = 0.5, vjust = 0.5),
      axis.text.y = element_text(angle = 0, hjust = 1, vjust = 0.5),

      # Legends
      legend.position = "right",
      legend.title = element_text(face = "bold"),
      legend.text = element_text(size = 10),
      legend.background = element_rect(fill = "white", color = NA),
      legend.key = element_rect(fill = "white", color = "white"),

      # Panel settings
      panel.background = element_rect(fill = "white", color = "gray80"),
      panel.grid.major = element_line(color = "gray90", linewidth = 0.5),
      panel.grid.minor = element_line(color = "gray95", linewidth = 0.25),
      panel.border = element_rect(color = "gray80", fill = NA, linewidth = 0.5),

      # Plot margins
      plot.margin = unit(c(15, 15, 5, 5), "pt")
    )
}
